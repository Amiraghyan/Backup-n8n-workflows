{"createdAt":"2025-05-09T06:31:16.259Z","updatedAt":"2025-05-09T13:14:25.736Z","id":"HokJcUW4wTsg1T8f","name":"WordPress Template Generator From Scratch","active":false,"nodes":[{"parameters":{"formTitle":"Tell about your business","formDescription":"Create HTML template for your business","formFields":{"values":[{"fieldLabel":"Company name","requiredField":true},{"fieldLabel":"Description","requiredField":true},{"fieldLabel":"Industry","requiredField":true},{"fieldLabel":"Services OR products","requiredField":true}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[-1540,-160],"id":"c0ccaf01-79ea-4708-9fce-689c1b946b1a","name":"On form submission","webhookId":"20b5c737-dbf1-4f9b-b448-663d545f9f27"},{"parameters":{"modelName":"models/gemini-2.5-pro-exp-03-25","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[-1340,80],"id":"3da4acd6-b52f-4250-a338-9f35e4b11a29","name":"Google Gemini Chat Model1","credentials":{"googlePalmApi":{"id":"LpKUzBEiaACwRhaP","name":"Google Gemini(PaLM) Api account 7"}}},{"parameters":{"jsCode":"// Extract image prompts from HTML and replace with Pollination AI image URLs\n// This code is formatted for n8n's Function node\n// Process all input items\nconst processedItems = [];\nfor (const item of $input.all()) {\n  try {\n    // Get HTML content from input (try several common property names)\n    let htmlContent = item.json.output || item.json.html || item.json.content || '';\n    \n    if (!htmlContent) {\n      item.json.error = \"No HTML content found in input\";\n      processedItems.push(item);\n      continue;\n    }\n    \n    // Create a log of all replacements for debugging\n    const replacementLog = [];\n    \n    // Updated regex to match the actual HTML structure with img-placeholder class\n    const imagePromptRegex = /<div[^>]*class=\"[^\"]*img-placeholder[^\"]*\"[^>]*>\\s*<!--\\s*IMAGE_PROMPT:\\s*(.*?)\\s*-->\\s*<\\/div>/gs;\n    \n    const extractedPrompts = [];\n    \n    // We need to create a NEW string rather than modifying in place during regex execution\n    let newHtmlContent = htmlContent;\n    \n    // Function to process a match and create an image tag\n    const processMatch = (fullMatch, prompt) => {\n      const encodedPrompt = encodeURIComponent(prompt);\n      const pollinationUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}`;\n      \n      const imgAlt = `Image of ${prompt}`;\n      \n      // Extract the container class from the original div\n      const classMatch = fullMatch.match(/class=\"([^\"]*)\"/);\n      const containerClass = classMatch?.[1] || \"img-placeholder\";\n      \n      // Create image tag with appropriate styling\n      const imgTag = `<div class=\"${containerClass}\">\n        <img src=\"${pollinationUrl}\" alt=\"${imgAlt}\" style=\"max-width:100%; border-radius:8px; box-shadow:0 2px 5px rgba(0,0,0,0.2);\">\n      </div>`;\n      \n      // Store for output\n      extractedPrompts.push({\n        prompt,\n        pollinationUrl,\n        alt: imgAlt\n      });\n      \n      // Log this replacement\n      replacementLog.push({\n        type: 'placeholder_replaced',\n        originalText: fullMatch,\n        prompt,\n        url: pollinationUrl,\n        replacementText: imgTag\n      });\n      \n      return imgTag;\n    };\n    \n    // Find all img-placeholder divs with IMAGE_PROMPT comments\n    let match;\n    let matchCount = 0;\n    while ((match = imagePromptRegex.exec(htmlContent)) !== null) {\n      matchCount++;\n      const fullMatch = match[0];\n      const prompt = match[1];\n      \n      // Process this match\n      const imgTag = processMatch(fullMatch, prompt);\n      \n      // Replace in the HTML\n      newHtmlContent = newHtmlContent.replace(fullMatch, imgTag);\n    }\n    \n    // If we didn't find any matches with the first pattern, try a more general approach\n    if (matchCount === 0) {\n      // This pattern will look for any div with img-placeholder class followed by any content\n      const fallbackRegex = /<div[^>]*class=\"[^\"]*img-placeholder[^\"]*\"[^>]*>(.*?)<\\/div>/gs;\n      \n      while ((match = fallbackRegex.exec(htmlContent)) !== null) {\n        const fullMatch = match[0];\n        const innerContent = match[1];\n        \n        // Look for IMAGE_PROMPT within the inner content\n        const promptMatch = innerContent.match(/<!--\\s*IMAGE_PROMPT:\\s*(.*?)\\s*-->/s);\n        \n        if (promptMatch) {\n          const prompt = promptMatch[1];\n          const imgTag = processMatch(fullMatch, prompt);\n          newHtmlContent = newHtmlContent.replace(fullMatch, imgTag);\n        }\n      }\n    }\n    \n    // Update the item with the new HTML and extraction info\n    item.json.output = newHtmlContent;\n    item.json.extractedImagePrompts = extractedPrompts;\n    item.json.replacementCount = extractedPrompts.length;\n    item.json.replacementLog = replacementLog;  // For debugging\n    \n    // Add summary of what was processed\n    item.json.summary = `Processed ${extractedPrompts.length} image prompt${extractedPrompts.length !== 1 ? 's' : ''}.`;\n    \n  } catch (error) {\n    // If any error occurs, log it\n    item.json.error = `Error processing HTML with Pollination AI: ${error.message}`;\n    console.log('Error processing HTML with Pollination AI:', error);\n  }\n  \n  // Add the processed item to our return array\n  processedItems.push(item);\n}\n\n// Return the processed items\nreturn processedItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-960,-160],"id":"75c74fcd-f09f-451d-9bdd-389c1cfdfc59","name":"Add Images in TEMPLATE"},{"parameters":{"jsCode":"// Function to process HTML content and extract sections\nfunction processHTML(jsonInput) {\n  // Parse the input as JSON if it's a string\n  const input = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\n  \n  for (const item of input) {\n    // The HTML content is in item.json.output based on the provided sample\n    const html = item.json.output;\n    \n    // Extract head section\n    const headMatch = html.match(/<head[\\s\\S]*?<\\/head>/i);\n    const head = headMatch ? headMatch[0] : '';\n    \n    // Extract header/navigation\n    const headerMatch = html.match(/<header[\\s\\S]*?<\\/header>/i);\n    const header = headerMatch ? headerMatch[0] : '';\n    \n    // Extract sections by ID\n    const extractSectionById = (id) => {\n      const regex = new RegExp(`<section[^>]*id=[\"']${id}[\"'][^>]*>([\\\\s\\\\S]*?)<\\/section>`, 'i');\n      const match = html.match(regex);\n      return match ? match[0] : '';\n    };\n    \n    // Extract individual sections\n    const hero = extractSectionById('hero');\n    const services = extractSectionById('services');\n    const about = extractSectionById('about');\n    const contact = extractSectionById('contact');\n    \n    // Extract footer\n    const footerMatch = html.match(/<footer[\\s\\S]*?<\\/footer>/i);\n    const footer = footerMatch ? footerMatch[0] : '';\n    \n    // Function to wrap content in HTML structure\n    const wrapHtml = (bodyContent) => {\n      return `<!DOCTYPE html><html lang=\"en\">${head}<body>${bodyContent}</body></html>`;\n    };\n    \n    // Create JSON output with all sections - adding to item.json\n    item.json.nav = wrapHtml(header);\n    item.json.hero = wrapHtml(hero);\n    item.json.services = wrapHtml(services);\n    item.json.about = wrapHtml(about);\n    item.json.contact = wrapHtml(contact);\n    item.json.footer = wrapHtml(footer);\n    \n    // Delete original full HTML to save space (optional)\n    delete item.json.output;\n  }\n  \n  return input;\n}\n\n// For n8n function node\n// Get the input data from the uploaded file\nconst inputItems = $input.all();\nconst processedItems = processHTML(inputItems);\nreturn processedItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-720,-160],"id":"eb84e573-8db4-46f2-b6a4-8e8dc01c6d08","name":"Seperate Each Section"},{"parameters":{"agent":"conversationalAgent","promptType":"define","text":"=Please create a complete, modern, and responsive HTML homepage using the company details below.\n\nCompany Name: {{ $json['Company name'] }}\nDescription: {{ $json.Description }}\nIndustry: {{ $json.Industry }}\nServices/Products: {{ $json['Services OR products'] }}\n\nUse the following layout:\n1. Clean top navigation\n2. Hero section with value proposition and a featured image\n3. Services section (3 image per item in: {{ $json['Services OR products'] }})\n4. About Us section with company culture and relevant image\n5. Contact form or call-to-action\n6. Industry-colored theme and mobile-friendly layout\n\nFor each section that includes an image, insert an image prompt placeholder using this format exactly:\n\nMust output the below image prompt. Each section should be different image prompt. must img-placeholder class in image prompt div.\n<!-- IMAGE_PROMPT: Generate a creative image prompt for: {{ $json.Description }} and {{ $json['Services OR products'] }} in the {{ $json.Industry }} industry -->\n\nOnly output valid HTML content. must remove \\n.\nDo not include any extra text, instructions, or explanations outside the HTML.\nDo not use broken placeholders like \"GenerateImagePromptHere\".\nMake sure all HTML is clean and production-ready.","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-1320,-160],"id":"affc7176-7097-42f6-bf32-443a8b7c2892","name":"HTML page generator"},{"parameters":{"jsCode":"// This function takes the current JSON structure and transforms it\n// into an array where each section is a separate object\nfunction restructureJsonForN8n(originalData) {\n  console.log(\"Input data type:\", typeof originalData);\n  \n  // Handle direct object input (not wrapped in array)\n  if (originalData && typeof originalData === 'object' && !Array.isArray(originalData)) {\n    console.log(\"Data is a direct object, not an array\");\n    // Create a new array with individual objects for each section\n    const restructuredData = [];\n    \n    // Add each section as a separate object in the array\n    for (const [key, value] of Object.entries(originalData)) {\n      restructuredData.push({\n        section: key,\n        content: value\n      });\n    }\n    \n    return restructuredData;\n  }\n  \n  // Check if originalData exists and is an array with at least one element\n  if (!originalData || !Array.isArray(originalData) || originalData.length === 0 || !originalData[0]) {\n    // Handle the error case gracefully\n    console.log(\"Input data is missing or invalid\");\n    return [{ error: \"Input data is missing or invalid\", dataType: typeof originalData }];\n  }\n  \n  // Extract the sections from the first object in the array\n  const sections = originalData[0];\n  \n  // Verify that sections is an object before proceeding\n  if (typeof sections !== 'object' || sections === null) {\n    console.log(\"First item in array is not a valid object\");\n    return [{ error: \"First item in array is not an object\", itemType: typeof sections }];\n  }\n  \n  // Create a new array with individual objects for each section\n  const restructuredData = [];\n  \n  // Add each section as a separate object in the array\n  for (const [key, value] of Object.entries(sections)) {\n    restructuredData.push({\n      section: key,\n      content: value\n    });\n  }\n  \n  return restructuredData;\n}\n\n// Example usage in n8n:\n// Get the incoming data and log it for debugging\nlet originalData;\ntry {\n  // First, let's examine what we actually have in the input\n  console.log(\"Debugging items structure:\", JSON.stringify(items));\n  \n  // Try standard n8n data locations\n  originalData = items[0]?.json;\n  \n  // If that's empty, try other common locations\n  if (!originalData) {\n    originalData = items[0]?.binary?.data?.json || items[0]?.data || items[0]?.parameter?.data;\n  }\n  \n  // Maybe the data is directly in items[0]\n  if (!originalData && typeof items[0] === 'object') {\n    // If items[0] itself appears to be our data object\n    originalData = [items[0]];\n  }\n  \n  // Maybe the data is already in the right format and doesn't need the [0] subscript\n  if (!originalData && items && Array.isArray(items)) {\n    originalData = items;\n  }\n  \n  console.log(\"Original data before processing:\", JSON.stringify(originalData));\n  \n  const restructuredData = restructureJsonForN8n(originalData);\n  return restructuredData;\n} catch (error) {\n  // Handle any errors that might occur\n  return [{ \n    error: \"Error processing data\", \n    message: error.message,\n    itemsStructure: JSON.stringify(items).substring(0, 200) + \"...\" // Show items structure for debugging\n  }];\n}\n\n/* \nExample output format:\n[\n  {\n    \"section\": \"nav\",\n    \"content\": \"<!DOCTYPE html>...\"\n  },\n  {\n    \"section\": \"hero\",\n    \"content\": \"<!DOCTYPE html>...\"\n  },\n  // More sections...\n]\n*/"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-500,-160],"id":"3ffd94bb-c82b-4db9-abcf-59a2eb60887e","name":"Code"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1400,240],"id":"07efff25-bc8e-40f0-b8d8-9281f52b05eb","name":"Loop Over Items2"},{"parameters":{"agent":"conversationalAgent","promptType":"define","text":"=Create elementor json template using this section \n{{ $json.content }}\n\nmust remove \\n in the output","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-1160,260],"id":"4d508f73-804e-4573-a8d8-2c4d724ef664","name":"Convert to Elementor JSON template6"},{"parameters":{"modelName":"models/gemini-2.0-pro-exp-02-05","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[-1180,500],"id":"51cef87f-fe2e-4462-b876-4ffc085092c7","name":"Google Gemini Chat Model8","credentials":{"googlePalmApi":{"id":"LpKUzBEiaACwRhaP","name":"Google Gemini(PaLM) Api account 7"}}},{"parameters":{"maxItems":6,"keep":"lastItems"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[-260,-160],"id":"9eeaf812-fcd8-4859-adc4-b0affa627147","name":"Limit"},{"parameters":{"jsCode":"// This function extracts the JSON data from the output field\nconst extractJsonData = items => {\n  try {\n    const inputData = items[0];\n    \n    if (inputData.json && inputData.json.output) {\n      const jsonContent = JSON.parse(inputData.json.output);\n      return [{ json: jsonContent }];\n    } else {\n      return [{ json: { error: 'No output field found in input data' } }];\n    }\n  } catch (error) {\n    return [{ json: { error: error.message } }];\n  }\n};\n\nreturn extractJsonData(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-780,260],"id":"3412fee7-4014-4ebd-a4af-424d4030d150","name":"Extract JSON Data6"},{"parameters":{"jsCode":"const convertToText = items => {\n  try {\n    // Get the JSON data\n    const jsonData = items[0].json || items[0];\n    \n    // Convert to string if it's not already\n    const textData = typeof jsonData === 'string' ? jsonData : JSON.stringify(jsonData, null, 2);\n    \n    // Try to access the title directly from the items array\n    let fileName = \"extracted_data.json\";\n    \n    // Check if title exists directly in the first item\n    if (items[0] && items[0].title) {\n      fileName = items[0].title + \".json\";\n    }\n    // If not, check if we can parse it from jsonData\n    else if (typeof jsonData === 'object' && jsonData.title) {\n      fileName = jsonData.title + \".json\";\n    }\n    \n    return [{\n      json: {\n        textData: textData,\n        fileName: fileName\n      }\n    }];\n  } catch (error) {\n    // Simple error handling to avoid complex operations\n    return [{ json: { error: \"Error processing data\" } }];\n  }\n};\n\nreturn convertToText(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-540,260],"id":"d4e9c729-df9b-4fd6-90b9-2a5a81fa8947","name":"Convert to Text"},{"parameters":{"jsCode":"const prepareBinaryData = items => {\n  try {\n    const textData = items[0].json.textData;\n    const fileName = items[0].json.fileName;\n    \n    const binaryData = Buffer.from(textData);\n    \n    return [{\n      json: {\n        fileName: fileName\n      },\n      binary: {\n        data: {\n          data: binaryData.toString('base64'),\n          mimeType: 'application/json',\n          fileName: fileName\n        }\n      }\n    }];\n  } catch (error) {\n    return [{ json: { error: error.message } }];\n  }\n};\n\nreturn prepareBinaryData(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-320,260],"id":"3d0c2828-e98e-4bc4-b673-38a610b01682","name":"Prepare Binary Data"},{"parameters":{"name":"={{ $json.fileName }}","driveId":{"__rl":true,"mode":"list","value":"My Drive"},"folderId":{"__rl":true,"value":"1WJ_Y8cSX5LKzspW9_4-LSqtkAFCI-1vh","mode":"list","cachedResultName":"Elementor Templates","cachedResultUrl":"https://drive.google.com/drive/folders/1WJ_Y8cSX5LKzspW9_4-LSqtkAFCI-1vh"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[-1040,80],"id":"b15e8609-5ae8-46ba-a129-ee0bef2d009c","name":"Created Elementor File Uploaded in Google Drive","credentials":{"googleDriveOAuth2Api":{"id":"QPbseGO1YaiqWnXP","name":"Google Drive account 3"}}}],"connections":{"On form submission":{"main":[[{"node":"HTML page generator","type":"main","index":0}]]},"Google Gemini Chat Model1":{"ai_languageModel":[[{"node":"HTML page generator","type":"ai_languageModel","index":0}]]},"Add Images in TEMPLATE":{"main":[[{"node":"Seperate Each Section","type":"main","index":0}]]},"Seperate Each Section":{"main":[[{"node":"Code","type":"main","index":0}]]},"HTML page generator":{"main":[[{"node":"Add Images in TEMPLATE","type":"main","index":0}]]},"Code":{"main":[[{"node":"Limit","type":"main","index":0}]]},"Loop Over Items2":{"main":[[{"node":"Created Elementor File Uploaded in Google Drive","type":"main","index":0}],[{"node":"Convert to Elementor JSON template6","type":"main","index":0}]]},"Convert to Elementor JSON template6":{"main":[[{"node":"Extract JSON Data6","type":"main","index":0}]]},"Google Gemini Chat Model8":{"ai_languageModel":[[{"node":"Convert to Elementor JSON template6","type":"ai_languageModel","index":0}]]},"Limit":{"main":[[{"node":"Loop Over Items2","type":"main","index":0}]]},"Extract JSON Data6":{"main":[[{"node":"Convert to Text","type":"main","index":0}]]},"Convert to Text":{"main":[[{"node":"Prepare Binary Data","type":"main","index":0}]]},"Prepare Binary Data":{"main":[[{"node":"Loop Over Items2","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"On form submission":[{"json":{"Company name":"myboatparis","Description":"Boat rental company for tourist in paris","Industry":"Rental","Services OR products":"Boat rental","submittedAt":"2025-05-05T07:59:42.040+02:00","formMode":"test"}}]},"versionId":"1f562a0b-8293-45c1-82c5-dd894dcb1992","triggerCount":0,"tags":[]}