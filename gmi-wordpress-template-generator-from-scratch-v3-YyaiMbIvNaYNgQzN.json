{"createdAt":"2025-06-04T11:07:40.852Z","updatedAt":"2025-07-02T13:37:31.324Z","id":"YyaiMbIvNaYNgQzN","name":"GMI WordPress Template Generator From Scratch V3","active":false,"isArchived":false,"nodes":[{"parameters":{"modelName":"models/gemini-2.5-pro-exp-03-25","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[-1340,80],"id":"71d699c4-a23b-4fd5-8c99-c626733beb43","name":"Google Gemini Chat Model1","credentials":{"googlePalmApi":{"id":"LpKUzBEiaACwRhaP","name":"Google Gemini(PaLM) Api account 7"}},"disabled":true},{"parameters":{"jsCode":"// Extract image prompts from HTML and replace with Pollination AI image URLs\n// This code is formatted for n8n's Function node\n// Process all input items\nconst processedItems = [];\nfor (const item of $input.all()) {\n  try {\n    // Get HTML content from input (try several common property names)\n    let htmlContent = item.json.output || item.json.html || item.json.content || '';\n    \n    if (!htmlContent) {\n      item.json.error = \"No HTML content found in input\";\n      processedItems.push(item);\n      continue;\n    }\n    \n    // Create a log of all replacements for debugging\n    const replacementLog = [];\n    \n    // Updated regex to match the actual HTML structure with img-placeholder class\n    const imagePromptRegex = /<div[^>]*class=\"[^\"]*img-placeholder[^\"]*\"[^>]*>\\s*<!--\\s*IMAGE_PROMPT:\\s*(.*?)\\s*-->\\s*<\\/div>/gs;\n    \n    const extractedPrompts = [];\n    \n    // We need to create a NEW string rather than modifying in place during regex execution\n    let newHtmlContent = htmlContent;\n    \n    // Function to process a match and create an image tag\n    const processMatch = (fullMatch, prompt) => {\n      const encodedPrompt = encodeURIComponent(prompt);\n      const pollinationUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}`;\n      \n      const imgAlt = `Image of ${prompt}`;\n      \n      // Extract the container class from the original div\n      const classMatch = fullMatch.match(/class=\"([^\"]*)\"/);\n      const containerClass = classMatch?.[1] || \"img-placeholder\";\n      \n      // Create image tag with appropriate styling\n      const imgTag = `<div class=\"${containerClass}\">\n        <img src=\"${pollinationUrl}\" alt=\"${imgAlt}\" style=\"max-width:100%; border-radius:8px; box-shadow:0 2px 5px rgba(0,0,0,0.2);\">\n      </div>`;\n      \n      // Store for output\n      extractedPrompts.push({\n        prompt,\n        pollinationUrl,\n        alt: imgAlt\n      });\n      \n      // Log this replacement\n      replacementLog.push({\n        type: 'placeholder_replaced',\n        originalText: fullMatch,\n        prompt,\n        url: pollinationUrl,\n        replacementText: imgTag\n      });\n      \n      return imgTag;\n    };\n    \n    // Find all img-placeholder divs with IMAGE_PROMPT comments\n    let match;\n    let matchCount = 0;\n    while ((match = imagePromptRegex.exec(htmlContent)) !== null) {\n      matchCount++;\n      const fullMatch = match[0];\n      const prompt = match[1];\n      \n      // Process this match\n      const imgTag = processMatch(fullMatch, prompt);\n      \n      // Replace in the HTML\n      newHtmlContent = newHtmlContent.replace(fullMatch, imgTag);\n    }\n    \n    // If we didn't find any matches with the first pattern, try a more general approach\n    if (matchCount === 0) {\n      // This pattern will look for any div with img-placeholder class followed by any content\n      const fallbackRegex = /<div[^>]*class=\"[^\"]*img-placeholder[^\"]*\"[^>]*>(.*?)<\\/div>/gs;\n      \n      while ((match = fallbackRegex.exec(htmlContent)) !== null) {\n        const fullMatch = match[0];\n        const innerContent = match[1];\n        \n        // Look for IMAGE_PROMPT within the inner content\n        const promptMatch = innerContent.match(/<!--\\s*IMAGE_PROMPT:\\s*(.*?)\\s*-->/s);\n        \n        if (promptMatch) {\n          const prompt = promptMatch[1];\n          const imgTag = processMatch(fullMatch, prompt);\n          newHtmlContent = newHtmlContent.replace(fullMatch, imgTag);\n        }\n      }\n    }\n    \n    // Update the item with the new HTML and extraction info\n    item.json.output = newHtmlContent;\n    item.json.extractedImagePrompts = extractedPrompts;\n    item.json.replacementCount = extractedPrompts.length;\n    item.json.replacementLog = replacementLog;  // For debugging\n    \n    // Add summary of what was processed\n    item.json.summary = `Processed ${extractedPrompts.length} image prompt${extractedPrompts.length !== 1 ? 's' : ''}.`;\n    \n  } catch (error) {\n    // If any error occurs, log it\n    item.json.error = `Error processing HTML with Pollination AI: ${error.message}`;\n    console.log('Error processing HTML with Pollination AI:', error);\n  }\n  \n  // Add the processed item to our return array\n  processedItems.push(item);\n}\n\n// Return the processed items\nreturn processedItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-960,-160],"id":"3c4ae6e8-1c0b-4a07-bfc5-e1976c12f00b","name":"Add Images in TEMPLATE","disabled":true},{"parameters":{"jsCode":"// Function to process HTML content and extract sections\nfunction processHTML(jsonInput) {\n  // Parse the input as JSON if it's a string\n  const input = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\n  \n  for (const item of input) {\n    // The HTML content is in item.json.output based on the provided sample\n    const html = item.json.output;\n    \n    // Extract head section\n    const headMatch = html.match(/<head[\\s\\S]*?<\\/head>/i);\n    const head = headMatch ? headMatch[0] : '';\n    \n    // Extract header/navigation\n    const headerMatch = html.match(/<header[\\s\\S]*?<\\/header>/i);\n    const header = headerMatch ? headerMatch[0] : '';\n    \n    // Extract sections by ID\n    const extractSectionById = (id) => {\n      const regex = new RegExp(`<section[^>]*id=[\"']${id}[\"'][^>]*>([\\\\s\\\\S]*?)<\\/section>`, 'i');\n      const match = html.match(regex);\n      return match ? match[0] : '';\n    };\n    \n    // Extract individual sections\n    const hero = extractSectionById('hero');\n    const services = extractSectionById('services');\n    const about = extractSectionById('about');\n    const contact = extractSectionById('contact');\n    \n    // Extract footer\n    const footerMatch = html.match(/<footer[\\s\\S]*?<\\/footer>/i);\n    const footer = footerMatch ? footerMatch[0] : '';\n    \n    // Function to wrap content in HTML structure\n    const wrapHtml = (bodyContent) => {\n      return `<!DOCTYPE html><html lang=\"en\">${head}<body>${bodyContent}</body></html>`;\n    };\n    \n    // Create JSON output with all sections - adding to item.json\n    item.json.nav = wrapHtml(header);\n    item.json.hero = wrapHtml(hero);\n    item.json.services = wrapHtml(services);\n    item.json.about = wrapHtml(about);\n    item.json.contact = wrapHtml(contact);\n    item.json.footer = wrapHtml(footer);\n    \n    // Delete original full HTML to save space (optional)\n    delete item.json.output;\n  }\n  \n  return input;\n}\n\n// For n8n function node\n// Get the input data from the uploaded file\nconst inputItems = $input.all();\nconst processedItems = processHTML(inputItems);\nreturn processedItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-720,-160],"id":"d212def3-3d13-484a-938f-94daff8b5c71","name":"Seperate Each Section","disabled":true},{"parameters":{"agent":"conversationalAgent","promptType":"define","text":"=Please generate a complete, modern, and professionally designed HTML homepage using the dynamic company data below:\n\nCompany Name: {{ $json.body['Company name'] }}\nDescription: {{ $json.body.Description }}\nIndustry: {{ $json.body.Industry }}\nServices/Products: {{ $json.body['Services OR products'] }}\n\nDesign Requirements:\nCreate a mobile-first, fully responsive, visually engaging homepage layout with smooth UI/UX elements and appropriate industry-inspired color theme. Use modern HTML5 with semantic structure and clean CSS-ready class names. Avoid deprecated tags and inline styles.\nLayout Structure:\nSticky Top Navigation Bar\nCompany logo on the left\nSmooth scroll links on the right (Home, Services, About, Contact)\nMobile toggle menu for smaller screens\n\nHero Section\nLarge headline for value proposition (based on {{ $json.body.Description }})\nSubheading supporting the main value\nPrimary CTA button (e.g., \"Get Started\" or \"Explore Services\")\nRight side: featured industry-relevant image\nResponsive layout with mobile reflow\n<div class=\"img-placeholder\">\n<!-- IMAGE_PROMPT: Generate a creative image prompt for: {{ $json.body.Description }} and {{ $json.body['Services OR products'] }} in the {{ $json.body.Industry }} industry -->\n</div>\n\nServices/Products Section\nSection title: “What We Offer” or similar\nDisplay 3 key services/products as responsive cards (image, title, short description)\nGrid layout (3-column desktop, stacked on mobile)\n<div class=\"img-placeholder\">\n<!-- IMAGE_PROMPT: Generate a creative image prompt for: Visualizing key services from {{ $json.body['Services OR products'] }} in the {{ $json.body.Industry }} sector -->\n</div>\n\nAbout Us Section\nShort narrative of company culture, mission, and team\n\nImage that reflects people, innovation, or workspace culture\n\nTwo-column layout: text + image (reversed on mobile)\n\n<div class=\"img-placeholder\">\n<!-- IMAGE_PROMPT: Generate a creative image prompt for: Company culture of {{ $json.body['Company name'] }} in the {{ $json.body.Industry }} industry -->\n</div>\n\nContact Section / CTA\nEngaging call-to-action headline\nSimple form with name, email, message fields\nOr prominent phone number / email with CTA button\nBackground image or accent color for visibility\n<div class=\"img-placeholder\">\n<!-- IMAGE_PROMPT: Generate a creative image prompt for: Professional contact environment in the {{ $json.body.Industry }} industry related to {{ $json.body['Company name'] }}-->\n</div>\n\nImportant Rules:\nUse semantic, accessible HTML5 only\nUse meaningful class names (e.g., .hero, .services-card, .about-image)\nDo not include newline (\\n) characters in output\nNo explanation, only valid HTML output\nUse the exact <!-- IMAGE_PROMPT: ... --> format with .img-placeholder wrapper for image sections\nNo broken placeholders or incomplete tags\nMake the final output production-ready with no need for revision.","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-1320,-160],"id":"f62cd77f-d31b-4b38-b7ff-8b5628a5a12a","name":"HTML page generator","disabled":true},{"parameters":{"jsCode":"// This function takes the current JSON structure and transforms it\n// into an array where each section is a separate object\nfunction restructureJsonForN8n(originalData) {\n  console.log(\"Input data type:\", typeof originalData);\n  \n  // Handle direct object input (not wrapped in array)\n  if (originalData && typeof originalData === 'object' && !Array.isArray(originalData)) {\n    console.log(\"Data is a direct object, not an array\");\n    // Create a new array with individual objects for each section\n    const restructuredData = [];\n    \n    // Add each section as a separate object in the array\n    for (const [key, value] of Object.entries(originalData)) {\n      restructuredData.push({\n        section: key,\n        content: value\n      });\n    }\n    \n    return restructuredData;\n  }\n  \n  // Check if originalData exists and is an array with at least one element\n  if (!originalData || !Array.isArray(originalData) || originalData.length === 0 || !originalData[0]) {\n    // Handle the error case gracefully\n    console.log(\"Input data is missing or invalid\");\n    return [{ error: \"Input data is missing or invalid\", dataType: typeof originalData }];\n  }\n  \n  // Extract the sections from the first object in the array\n  const sections = originalData[0];\n  \n  // Verify that sections is an object before proceeding\n  if (typeof sections !== 'object' || sections === null) {\n    console.log(\"First item in array is not a valid object\");\n    return [{ error: \"First item in array is not an object\", itemType: typeof sections }];\n  }\n  \n  // Create a new array with individual objects for each section\n  const restructuredData = [];\n  \n  // Add each section as a separate object in the array\n  for (const [key, value] of Object.entries(sections)) {\n    restructuredData.push({\n      section: key,\n      content: value\n    });\n  }\n  \n  return restructuredData;\n}\n\n// Example usage in n8n:\n// Get the incoming data and log it for debugging\nlet originalData;\ntry {\n  // First, let's examine what we actually have in the input\n  console.log(\"Debugging items structure:\", JSON.stringify(items));\n  \n  // Try standard n8n data locations\n  originalData = items[0]?.json;\n  \n  // If that's empty, try other common locations\n  if (!originalData) {\n    originalData = items[0]?.binary?.data?.json || items[0]?.data || items[0]?.parameter?.data;\n  }\n  \n  // Maybe the data is directly in items[0]\n  if (!originalData && typeof items[0] === 'object') {\n    // If items[0] itself appears to be our data object\n    originalData = [items[0]];\n  }\n  \n  // Maybe the data is already in the right format and doesn't need the [0] subscript\n  if (!originalData && items && Array.isArray(items)) {\n    originalData = items;\n  }\n  \n  console.log(\"Original data before processing:\", JSON.stringify(originalData));\n  \n  const restructuredData = restructureJsonForN8n(originalData);\n  return restructuredData;\n} catch (error) {\n  // Handle any errors that might occur\n  return [{ \n    error: \"Error processing data\", \n    message: error.message,\n    itemsStructure: JSON.stringify(items).substring(0, 200) + \"...\" // Show items structure for debugging\n  }];\n}\n\n/* \nExample output format:\n[\n  {\n    \"section\": \"nav\",\n    \"content\": \"<!DOCTYPE html>...\"\n  },\n  {\n    \"section\": \"hero\",\n    \"content\": \"<!DOCTYPE html>...\"\n  },\n  // More sections...\n]\n*/"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-500,-160],"id":"5ef80959-9b9f-4b72-b803-6f5231449974","name":"Code","disabled":true},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1400,240],"id":"30d0a11b-2925-49f6-bf91-9cfa64a1b077","name":"Loop Over Items2","disabled":true},{"parameters":{"agent":"conversationalAgent","promptType":"define","text":"=Create elementor json template using this section \n{{ $json.content }}\n\nmust remove \\n in the output","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[-1160,260],"id":"68020153-dd66-4a0f-ab6b-4fe3d6280901","name":"Convert to Elementor JSON template6","disabled":true},{"parameters":{"modelName":"models/gemini-2.0-pro-exp-02-05","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[-1180,500],"id":"da36e9ee-7e5a-45d8-a901-da380e6b2a1a","name":"Google Gemini Chat Model8","credentials":{"googlePalmApi":{"id":"LpKUzBEiaACwRhaP","name":"Google Gemini(PaLM) Api account 7"}},"disabled":true},{"parameters":{"maxItems":6,"keep":"lastItems"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[-260,-160],"id":"d5b79da0-4cfd-492d-9dc9-751c7680f93a","name":"Limit","disabled":true},{"parameters":{"jsCode":"// This function extracts the JSON data from the output field\nconst extractJsonData = items => {\n  try {\n    const inputData = items[0];\n    \n    if (inputData.json && inputData.json.output) {\n      const jsonContent = JSON.parse(inputData.json.output);\n      return [{ json: jsonContent }];\n    } else {\n      return [{ json: { error: 'No output field found in input data' } }];\n    }\n  } catch (error) {\n    return [{ json: { error: error.message } }];\n  }\n};\n\nreturn extractJsonData(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-780,260],"id":"4a04d44a-fc4d-4011-b032-2d5cd596168d","name":"Extract JSON Data6","disabled":true},{"parameters":{"jsCode":"const convertToText = items => {\n  try {\n    // Get the JSON data\n    const jsonData = items[0].json || items[0];\n    \n    // Convert to string if it's not already\n    const textData = typeof jsonData === 'string' ? jsonData : JSON.stringify(jsonData, null, 2);\n    \n    // Try to access the title directly from the items array\n    let fileName = \"extracted_data.json\";\n    \n    // Check if title exists directly in the first item\n    if (items[0] && items[0].title) {\n      fileName = items[0].title + \".json\";\n    }\n    // If not, check if we can parse it from jsonData\n    else if (typeof jsonData === 'object' && jsonData.title) {\n      fileName = jsonData.title + \".json\";\n    }\n    \n    return [{\n      json: {\n        textData: textData,\n        fileName: fileName\n      }\n    }];\n  } catch (error) {\n    // Simple error handling to avoid complex operations\n    return [{ json: { error: \"Error processing data\" } }];\n  }\n};\n\nreturn convertToText(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-540,260],"id":"2b43b0db-245d-44c0-8fba-af49501f422c","name":"Convert to Text","disabled":true},{"parameters":{"jsCode":"const prepareBinaryData = items => {\n  try {\n    const textData = items[0].json.textData;\n    const fileName = items[0].json.fileName;\n    \n    const binaryData = Buffer.from(textData);\n    \n    return [{\n      json: {\n        fileName: fileName\n      },\n      binary: {\n        data: {\n          data: binaryData.toString('base64'),\n          mimeType: 'application/json',\n          fileName: fileName\n        }\n      }\n    }];\n  } catch (error) {\n    return [{ json: { error: error.message } }];\n  }\n};\n\nreturn prepareBinaryData(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-320,260],"id":"8b8f1462-de53-4622-b328-d78375b46208","name":"Prepare Binary Data","disabled":true},{"parameters":{"name":"={{ $json.fileName }}","driveId":{"__rl":true,"mode":"list","value":"My Drive"},"folderId":{"__rl":true,"value":"1WJ_Y8cSX5LKzspW9_4-LSqtkAFCI-1vh","mode":"list","cachedResultName":"Elementor Templates","cachedResultUrl":"https://drive.google.com/drive/folders/1WJ_Y8cSX5LKzspW9_4-LSqtkAFCI-1vh"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[-1040,80],"id":"f2828d7f-fd27-4539-aa64-67702ac040d4","name":"Created Elementor File Uploaded in Google Drive","credentials":{"googleDriveOAuth2Api":{"id":"QPbseGO1YaiqWnXP","name":"Google Drive account 3"}},"disabled":true},{"parameters":{"formTitle":"Tell about your business","formDescription":"Create HTML template for your business","formFields":{"values":[{"fieldLabel":"Company name","requiredField":true},{"fieldLabel":"Description","requiredField":true},{"fieldLabel":"Industry","requiredField":true},{"fieldLabel":"Services OR products","requiredField":true}]},"options":{}},"type":"n8n-nodes-base.formTrigger","typeVersion":2.2,"position":[280,-160],"id":"fa1f6e92-8446-4210-94b9-31e2888daf3c","name":"On form submission1","webhookId":"7bdce235-2643-441d-82e0-abfe4e7ffc05"},{"parameters":{"modelName":"models/gemini-1.5-flash-8b-latest","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[480,80],"id":"226dce22-6b2a-4492-b1d1-3b5881012b1d","name":"Google Gemini Chat Model","credentials":{"googlePalmApi":{"id":"RriVAUsviKo9fURf","name":"Google Gemini(PaLM) Api account 10"}}},{"parameters":{"jsCode":"// Extract image prompts from HTML and replace with Pollination AI image URLs\n// This code is formatted for n8n's Function node\n// Process all input items\nconst processedItems = [];\nfor (const item of $input.all()) {\n  try {\n    // Get HTML content from input (try several common property names)\n    let htmlContent = item.json.output || item.json.html || item.json.content || '';\n    \n    if (!htmlContent) {\n      item.json.error = \"No HTML content found in input\";\n      processedItems.push(item);\n      continue;\n    }\n    \n    // Create a log of all replacements for debugging\n    const replacementLog = [];\n    \n    // Updated regex to match the actual HTML structure with img-placeholder class\n    const imagePromptRegex = /<div[^>]*class=\"[^\"]*img-placeholder[^\"]*\"[^>]*>\\s*<!--\\s*IMAGE_PROMPT:\\s*(.*?)\\s*-->\\s*<\\/div>/gs;\n    \n    const extractedPrompts = [];\n    \n    // We need to create a NEW string rather than modifying in place during regex execution\n    let newHtmlContent = htmlContent;\n    \n    // Function to process a match and create an image tag\n    const processMatch = (fullMatch, prompt) => {\n      const encodedPrompt = encodeURIComponent(prompt);\n      const pollinationUrl = `https://image.pollinations.ai/prompt/${encodedPrompt}`;\n      \n      const imgAlt = `Image of ${prompt}`;\n      \n      // Extract the container class from the original div\n      const classMatch = fullMatch.match(/class=\"([^\"]*)\"/);\n      const containerClass = classMatch?.[1] || \"img-placeholder\";\n      \n      // Create image tag with appropriate styling\n      const imgTag = `<div class=\"${containerClass}\">\n        <img src=\"${pollinationUrl}\" alt=\"${imgAlt}\" style=\"max-width:100%; border-radius:8px; box-shadow:0 2px 5px rgba(0,0,0,0.2);\">\n      </div>`;\n      \n      // Store for output\n      extractedPrompts.push({\n        prompt,\n        pollinationUrl,\n        alt: imgAlt\n      });\n      \n      // Log this replacement\n      replacementLog.push({\n        type: 'placeholder_replaced',\n        originalText: fullMatch,\n        prompt,\n        url: pollinationUrl,\n        replacementText: imgTag\n      });\n      \n      return imgTag;\n    };\n    \n    // Find all img-placeholder divs with IMAGE_PROMPT comments\n    let match;\n    let matchCount = 0;\n    while ((match = imagePromptRegex.exec(htmlContent)) !== null) {\n      matchCount++;\n      const fullMatch = match[0];\n      const prompt = match[1];\n      \n      // Process this match\n      const imgTag = processMatch(fullMatch, prompt);\n      \n      // Replace in the HTML\n      newHtmlContent = newHtmlContent.replace(fullMatch, imgTag);\n    }\n    \n    // If we didn't find any matches with the first pattern, try a more general approach\n    if (matchCount === 0) {\n      // This pattern will look for any div with img-placeholder class followed by any content\n      const fallbackRegex = /<div[^>]*class=\"[^\"]*img-placeholder[^\"]*\"[^>]*>(.*?)<\\/div>/gs;\n      \n      while ((match = fallbackRegex.exec(htmlContent)) !== null) {\n        const fullMatch = match[0];\n        const innerContent = match[1];\n        \n        // Look for IMAGE_PROMPT within the inner content\n        const promptMatch = innerContent.match(/<!--\\s*IMAGE_PROMPT:\\s*(.*?)\\s*-->/s);\n        \n        if (promptMatch) {\n          const prompt = promptMatch[1];\n          const imgTag = processMatch(fullMatch, prompt);\n          newHtmlContent = newHtmlContent.replace(fullMatch, imgTag);\n        }\n      }\n    }\n    \n    // Update the item with the new HTML and extraction info\n    item.json.output = newHtmlContent;\n    item.json.extractedImagePrompts = extractedPrompts;\n    item.json.replacementCount = extractedPrompts.length;\n    item.json.replacementLog = replacementLog;  // For debugging\n    \n    // Add summary of what was processed\n    item.json.summary = `Processed ${extractedPrompts.length} image prompt${extractedPrompts.length !== 1 ? 's' : ''}.`;\n    \n  } catch (error) {\n    // If any error occurs, log it\n    item.json.error = `Error processing HTML with Pollination AI: ${error.message}`;\n    console.log('Error processing HTML with Pollination AI:', error);\n  }\n  \n  // Add the processed item to our return array\n  processedItems.push(item);\n}\n\n// Return the processed items\nreturn processedItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[860,-160],"id":"abff9477-3a02-454b-ad23-de61d021429f","name":"Add Images in TEMPLATE1"},{"parameters":{"jsCode":"// Function to process HTML content and extract sections\nfunction processHTML(jsonInput) {\n  // Parse the input as JSON if it's a string\n  const input = typeof jsonInput === 'string' ? JSON.parse(jsonInput) : jsonInput;\n  \n  for (const item of input) {\n    // The HTML content is in item.json.output based on the provided sample\n    const html = item.json.output;\n    \n    // Extract head section\n    const headMatch = html.match(/<head[\\s\\S]*?<\\/head>/i);\n    const head = headMatch ? headMatch[0] : '';\n    \n    // Extract header/navigation\n    const headerMatch = html.match(/<header[\\s\\S]*?<\\/header>/i);\n    const header = headerMatch ? headerMatch[0] : '';\n    \n    // Extract sections by ID\n    const extractSectionById = (id) => {\n      const regex = new RegExp(`<section[^>]*id=[\"']${id}[\"'][^>]*>([\\\\s\\\\S]*?)<\\/section>`, 'i');\n      const match = html.match(regex);\n      return match ? match[0] : '';\n    };\n    \n    // Extract individual sections\n    const hero = extractSectionById('hero');\n    const services = extractSectionById('services');\n    const about = extractSectionById('about');\n    const contact = extractSectionById('contact');\n    \n    // Extract footer\n    const footerMatch = html.match(/<footer[\\s\\S]*?<\\/footer>/i);\n    const footer = footerMatch ? footerMatch[0] : '';\n    \n    // Function to wrap content in HTML structure\n    const wrapHtml = (bodyContent) => {\n      return `<!DOCTYPE html><html lang=\"en\">${head}<body>${bodyContent}</body></html>`;\n    };\n    \n    // Create JSON output with all sections - adding to item.json\n    item.json.nav = wrapHtml(header);\n    item.json.hero = wrapHtml(hero);\n    item.json.services = wrapHtml(services);\n    item.json.about = wrapHtml(about);\n    item.json.contact = wrapHtml(contact);\n    item.json.footer = wrapHtml(footer);\n    \n    // Delete original full HTML to save space (optional)\n    delete item.json.output;\n  }\n  \n  return input;\n}\n\n// For n8n function node\n// Get the input data from the uploaded file\nconst inputItems = $input.all();\nconst processedItems = processHTML(inputItems);\nreturn processedItems;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1100,-160],"id":"4e2d662a-0ced-4f09-9c3c-aa5dabdff444","name":"Seperate Each Section1"},{"parameters":{"agent":"conversationalAgent","promptType":"define","text":"=Please generate a complete, modern, and professionally designed HTML homepage using the dynamic company data below:\n\nCompany Name: {{ $json['Company name'] }}\nDescription: {{ $json.Description }}\nIndustry: {{ $json.Industry }}\nServices/Products: {{ $json['Services OR products'] }}\n\nDesign Requirements:\nCreate a mobile-first, fully responsive, visually engaging homepage layout with smooth UI/UX elements and appropriate industry-inspired color theme. Use modern HTML5 with semantic structure and clean CSS-ready class names. Avoid deprecated tags and inline styles.\nLayout Structure:\nSticky Top Navigation Bar\nCompany logo on the left\nSmooth scroll links on the right (Home, Services, About, Contact)\nMobile toggle menu for smaller screens\n\nHero Section\nLarge headline for value proposition (based on {{ $json.Description }})\nSubheading supporting the main value\nPrimary CTA button (e.g., \"Get Started\" or \"Explore Services\")\nRight side: featured industry-relevant image\nResponsive layout with mobile reflow\n<div class=\"img-placeholder\">\n<!-- IMAGE_PROMPT: Generate a creative image prompt for: {{ $json.Description }} and {{ $json['Services OR products'] }} in the {{ $json.Industry }} industry -->\n</div>\n\nServices/Products Section\nSection title: “What We Offer” or similar\nDisplay 3 key services/products as responsive cards (image, title, short description)\nGrid layout (3-column desktop, stacked on mobile)\n<div class=\"img-placeholder\">\n<!-- IMAGE_PROMPT: Generate a creative image prompt for: Visualizing key services from {{ $json['Services OR products'] }} in the {{ $json.Industry }} sector -->\n</div>\n\nAbout Us Section\nShort narrative of company culture, mission, and team\n\nImage that reflects people, innovation, or workspace culture\n\nTwo-column layout: text + image (reversed on mobile)\n\n<div class=\"img-placeholder\">\n<!-- IMAGE_PROMPT: Generate a creative image prompt for: Company culture of {{ $json['Company name'] }} in the {{ $json.Industry }} industry -->\n</div>\n\nContact Section / CTA\nEngaging call-to-action headline\nSimple form with name, email, message fields\nOr prominent phone number / email with CTA button\nBackground image or accent color for visibility\n<div class=\"img-placeholder\">\n<!-- IMAGE_PROMPT: Generate a creative image prompt for: Professional contact environment in the {{ $json.Industry }} industry related to {{ $json['Company name'] }} -->\n</div>\n\nImportant Rules:\nUse semantic, accessible HTML5 only\nUse meaningful class names (e.g., .hero, .services-card, .about-image)\nDo not include newline (\\n) characters in output\nNo explanation, only valid HTML output\nUse the exact <!-- IMAGE_PROMPT: ... --> format with .img-placeholder wrapper for image sections\nNo broken placeholders or incomplete tags\nMake the final output production-ready with no need for revision.","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[500,-160],"id":"436c1ad5-9c2a-4796-b19f-bfd8659e25f5","name":"HTML page generator1"},{"parameters":{"jsCode":"// This function takes the current JSON structure and transforms it\n// into an array where each section is a separate object\nfunction restructureJsonForN8n(originalData) {\n  console.log(\"Input data type:\", typeof originalData);\n  \n  // Handle direct object input (not wrapped in array)\n  if (originalData && typeof originalData === 'object' && !Array.isArray(originalData)) {\n    console.log(\"Data is a direct object, not an array\");\n    // Create a new array with individual objects for each section\n    const restructuredData = [];\n    \n    // Add each section as a separate object in the array\n    for (const [key, value] of Object.entries(originalData)) {\n      restructuredData.push({\n        section: key,\n        content: value\n      });\n    }\n    \n    return restructuredData;\n  }\n  \n  // Check if originalData exists and is an array with at least one element\n  if (!originalData || !Array.isArray(originalData) || originalData.length === 0 || !originalData[0]) {\n    // Handle the error case gracefully\n    console.log(\"Input data is missing or invalid\");\n    return [{ error: \"Input data is missing or invalid\", dataType: typeof originalData }];\n  }\n  \n  // Extract the sections from the first object in the array\n  const sections = originalData[0];\n  \n  // Verify that sections is an object before proceeding\n  if (typeof sections !== 'object' || sections === null) {\n    console.log(\"First item in array is not a valid object\");\n    return [{ error: \"First item in array is not an object\", itemType: typeof sections }];\n  }\n  \n  // Create a new array with individual objects for each section\n  const restructuredData = [];\n  \n  // Add each section as a separate object in the array\n  for (const [key, value] of Object.entries(sections)) {\n    restructuredData.push({\n      section: key,\n      content: value\n    });\n  }\n  \n  return restructuredData;\n}\n\n// Example usage in n8n:\n// Get the incoming data and log it for debugging\nlet originalData;\ntry {\n  // First, let's examine what we actually have in the input\n  console.log(\"Debugging items structure:\", JSON.stringify(items));\n  \n  // Try standard n8n data locations\n  originalData = items[0]?.json;\n  \n  // If that's empty, try other common locations\n  if (!originalData) {\n    originalData = items[0]?.binary?.data?.json || items[0]?.data || items[0]?.parameter?.data;\n  }\n  \n  // Maybe the data is directly in items[0]\n  if (!originalData && typeof items[0] === 'object') {\n    // If items[0] itself appears to be our data object\n    originalData = [items[0]];\n  }\n  \n  // Maybe the data is already in the right format and doesn't need the [0] subscript\n  if (!originalData && items && Array.isArray(items)) {\n    originalData = items;\n  }\n  \n  console.log(\"Original data before processing:\", JSON.stringify(originalData));\n  \n  const restructuredData = restructureJsonForN8n(originalData);\n  return restructuredData;\n} catch (error) {\n  // Handle any errors that might occur\n  return [{ \n    error: \"Error processing data\", \n    message: error.message,\n    itemsStructure: JSON.stringify(items).substring(0, 200) + \"...\" // Show items structure for debugging\n  }];\n}\n\n/* \nExample output format:\n[\n  {\n    \"section\": \"nav\",\n    \"content\": \"<!DOCTYPE html>...\"\n  },\n  {\n    \"section\": \"hero\",\n    \"content\": \"<!DOCTYPE html>...\"\n  },\n  // More sections...\n]\n*/"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1320,-160],"id":"91716efa-dd9f-4d22-a24d-0016338ecda7","name":"Code1"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[420,240],"id":"3fbf4fb3-7e31-49b9-85df-142643461ee8","name":"Loop Over Items"},{"parameters":{"agent":"conversationalAgent","promptType":"define","text":"=Create elementor json template using this section \n{{ $json.content }}","hasOutputParser":true,"options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.7,"position":[660,260],"id":"761a04c7-d7e1-4619-9a32-4fee8f08dd83","name":"Convert to Elementor JSON template"},{"parameters":{"modelName":"models/gemini-1.5-flash-8b-001","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[620,500],"id":"1e75ef3b-587b-4175-a05d-bef1a8f896f0","name":"Google Gemini Chat Model9","credentials":{"googlePalmApi":{"id":"LpKUzBEiaACwRhaP","name":"Google Gemini(PaLM) Api account 7"}}},{"parameters":{"maxItems":6,"keep":"lastItems"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[1560,-160],"id":"1f836fe9-076d-43eb-9108-f1d7ca555492","name":"Limit1"},{"parameters":{"jsCode":"// This function extracts the JSON data from the output field\nconst extractJsonData = items => {\n  try {\n    const inputData = items[0];\n    \n    if (inputData.json && inputData.json.output) {\n      const jsonContent = JSON.parse(inputData.json.output);\n      return [{ json: jsonContent }];\n    } else {\n      return [{ json: { error: 'No output field found in input data' } }];\n    }\n  } catch (error) {\n    return [{ json: { error: error.message } }];\n  }\n};\n\nreturn extractJsonData(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[700,-480],"id":"c46d400e-4a44-42d2-81ae-362aec324922","name":"Extract JSON Data","disabled":true},{"parameters":{"jsCode":"const convertToText = items => {\n  try {\n    // Get the JSON data\n    const jsonData = items[0].json || items[0];\n    \n    // Convert to string if it's not already\n    const textData = typeof jsonData === 'string' ? jsonData : JSON.stringify(jsonData, null, 2);\n    \n    // Try to access the title directly from the items array\n    let fileName = \"extracted_data.json\";\n    \n    // Check if title exists directly in the first item\n    if (items[0] && items[0].title) {\n      fileName = items[0].title + \".json\";\n    }\n    // If not, check if we can parse it from jsonData\n    else if (typeof jsonData === 'object' && jsonData.title) {\n      fileName = jsonData.title + \".json\";\n    }\n    \n    return [{\n      json: {\n        textData: textData,\n        fileName: fileName\n      }\n    }];\n  } catch (error) {\n    // Simple error handling to avoid complex operations\n    return [{ json: { error: \"Error processing data\" } }];\n  }\n};\n\nreturn convertToText(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[940,-480],"id":"17ea5fbd-8aa7-49e7-8cab-edb2c806ab30","name":"Convert to Text1","disabled":true},{"parameters":{"jsCode":"const prepareBinaryData = items => {\n  try {\n    const textData = items[0].json.textData;\n    const fileName = items[0].json.fileName;\n    \n    const binaryData = Buffer.from(textData);\n    \n    return [{\n      json: {\n        fileName: fileName\n      },\n      binary: {\n        data: {\n          data: binaryData.toString('base64'),\n          mimeType: 'application/json',\n          fileName: fileName\n        }\n      }\n    }];\n  } catch (error) {\n    return [{ json: { error: error.message } }];\n  }\n};\n\nreturn prepareBinaryData(items);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1160,-480],"id":"04d8d796-a97a-4809-877a-87873e90f3e7","name":"Prepare Binary Data1","disabled":true},{"parameters":{"name":"={{ $json.fileName }}","driveId":{"__rl":true,"mode":"list","value":"My Drive"},"folderId":{"__rl":true,"value":"1WJ_Y8cSX5LKzspW9_4-LSqtkAFCI-1vh","mode":"list","cachedResultName":"Elementor Templates","cachedResultUrl":"https://drive.google.com/drive/folders/1WJ_Y8cSX5LKzspW9_4-LSqtkAFCI-1vh"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[780,60],"id":"dcbb61d9-74dd-48dd-b3bd-c0114e343858","name":"Created Elementor File Uploaded in Google Drive1","credentials":{"googleDriveOAuth2Api":{"id":"QPbseGO1YaiqWnXP","name":"Google Drive account 3"}}},{"parameters":{"httpMethod":"POST","path":"86759613-fff9-4877-be3f-e43740b1d355","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[-1540,-160],"id":"15f84f4b-9513-49a9-bab5-b81d2ce19153","name":"Webhook","webhookId":"86759613-fff9-4877-be3f-e43740b1d355","disabled":true},{"parameters":{"options":{}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.1,"position":[-820,80],"id":"e985b5ba-b18f-4c1e-a596-24d6249c3570","name":"Respond to Webhook","disabled":true},{"parameters":{"model":"deepseek-r1-distill-llama-70b","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGroq","typeVersion":1,"position":[-80,320],"id":"eb280f9e-43f4-4689-8e55-6b3229980c96","name":"Groq Chat Model","credentials":{"groqApi":{"id":"OMg6wcM6CQrVSwuJ","name":"Groq account 3"}},"disabled":true},{"parameters":{"schemaType":"manual","inputSchema":"{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\",\n      \"description\": \"Unique identifier for the container\"\n    },\n    \"settings\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"flex_direction\": {\n          \"type\": \"string\",\n          \"enum\": [\"row\", \"column\"]\n        },\n        \"flex_direction_tablet\": {\n          \"type\": \"string\",\n          \"enum\": [\"row\", \"column\"]\n        },\n        \"flex_gap\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"column\": {\n              \"type\": \"string\"\n            },\n            \"row\": {\n              \"type\": \"string\"\n            },\n            \"isLinked\": {\n              \"type\": \"boolean\"\n            },\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"size\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        \"flex_gap_tablet\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"column\": {\n              \"type\": \"string\"\n            },\n            \"row\": {\n              \"type\": \"string\"\n            },\n            \"isLinked\": {\n              \"type\": \"boolean\"\n            },\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"size\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        \"background_overlay_background\": {\n          \"type\": \"string\"\n        },\n        \"background_overlay_image\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"url\": {\n              \"type\": \"string\"\n            },\n            \"id\": {\n              \"type\": \"number\"\n            },\n            \"size\": {\n              \"type\": \"string\"\n            },\n            \"alt\": {\n              \"type\": \"string\"\n            },\n            \"source\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"background_overlay_position\": {\n          \"type\": \"string\"\n        },\n        \"background_overlay_repeat\": {\n          \"type\": \"string\"\n        },\n        \"background_overlay_size\": {\n          \"type\": \"string\"\n        },\n        \"background_overlay_opacity\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"size\": {\n              \"type\": \"number\"\n            },\n            \"sizes\": {\n              \"type\": \"array\"\n            }\n          }\n        },\n        \"padding\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"top\": {\n              \"type\": \"string\"\n            },\n            \"right\": {\n              \"type\": \"string\"\n            },\n            \"bottom\": {\n              \"type\": \"string\"\n            },\n            \"left\": {\n              \"type\": \"string\"\n            },\n            \"isLinked\": {\n              \"type\": \"boolean\"\n            }\n          }\n        },\n        \"padding_tablet\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"top\": {\n              \"type\": \"string\"\n            },\n            \"right\": {\n              \"type\": \"string\"\n            },\n            \"bottom\": {\n              \"type\": \"string\"\n            },\n            \"left\": {\n              \"type\": \"string\"\n            },\n            \"isLinked\": {\n              \"type\": \"boolean\"\n            }\n          }\n        },\n        \"padding_mobile\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"top\": {\n              \"type\": \"string\"\n            },\n            \"right\": {\n              \"type\": \"string\"\n            },\n            \"bottom\": {\n              \"type\": \"string\"\n            },\n            \"left\": {\n              \"type\": \"string\"\n            },\n            \"isLinked\": {\n              \"type\": \"boolean\"\n            }\n          }\n        },\n        \"content_width\": {\n          \"type\": \"string\"\n        },\n        \"width\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"size\": {\n              \"type\": \"number\"\n            }\n          }\n        },\n        \"width_tablet\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"size\": {\n              \"type\": \"number\"\n            },\n            \"sizes\": {\n              \"type\": \"array\"\n            }\n          }\n        },\n        \"width_mobile\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"size\": {\n              \"type\": \"string\"\n            },\n            \"sizes\": {\n              \"type\": \"array\"\n            }\n          }\n        },\n        \"_flex_size\": {\n          \"type\": \"string\"\n        },\n        \"_element_width\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"string\"\n        },\n        \"__globals__\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          }\n        },\n        \"editor\": {\n          \"type\": \"string\"\n        },\n        \"text\": {\n          \"type\": \"string\"\n        },\n        \"button_background_hover_color\": {\n          \"type\": \"string\"\n        },\n        \"background_background\": {\n          \"type\": \"string\"\n        },\n        \"border_radius\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"top\": {\n              \"type\": \"string\"\n            },\n            \"right\": {\n              \"type\": \"string\"\n            },\n            \"bottom\": {\n              \"type\": \"string\"\n            },\n            \"left\": {\n              \"type\": \"string\"\n            },\n            \"isLinked\": {\n              \"type\": \"boolean\"\n            }\n          }\n        },\n        \"_padding\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"top\": {\n              \"type\": \"string\"\n            },\n            \"right\": {\n              \"type\": \"string\"\n            },\n            \"bottom\": {\n              \"type\": \"string\"\n            },\n            \"left\": {\n              \"type\": \"string\"\n            },\n            \"isLinked\": {\n              \"type\": \"boolean\"\n            }\n          }\n        },\n        \"_flex_align_self\": {\n          \"type\": \"string\"\n        },\n        \"_background_background\": {\n          \"type\": \"string\"\n        },\n        \"_border_radius\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"top\": {\n              \"type\": \"string\"\n            },\n            \"right\": {\n              \"type\": \"string\"\n            },\n            \"bottom\": {\n              \"type\": \"string\"\n            },\n            \"left\": {\n              \"type\": \"string\"\n            },\n            \"isLinked\": {\n              \"type\": \"boolean\"\n            }\n          }\n        },\n        \"flex_justify_content\": {\n          \"type\": \"string\"\n        },\n        \"flex_align_items\": {\n          \"type\": \"string\"\n        },\n        \"icon_list\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"text\": {\n                \"type\": \"string\"\n              },\n              \"selected_icon\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"value\": {\n                    \"type\": \"string\"\n                  },\n                  \"library\": {\n                    \"type\": \"string\"\n                  }\n                }\n              },\n              \"_id\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"selected_icon\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"value\": {\n              \"type\": \"string\"\n            },\n            \"library\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"icon_indent\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"size\": {\n              \"type\": \"number\"\n            },\n            \"sizes\": {\n              \"type\": \"array\"\n            }\n          }\n        },\n        \"text_padding\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"top\": {\n              \"type\": \"string\"\n            },\n            \"right\": {\n              \"type\": \"string\"\n            },\n            \"bottom\": {\n              \"type\": \"string\"\n            },\n            \"left\": {\n              \"type\": \"string\"\n            },\n            \"isLinked\": {\n              \"type\": \"boolean\"\n            }\n          }\n        },\n        \"_transform_rotate_popover\": {\n          \"type\": \"string\"\n        },\n        \"_transform_rotateZ_effect\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"unit\": {\n              \"type\": \"string\"\n            },\n            \"size\": {\n              \"type\": \"number\"\n            },\n            \"sizes\": {\n              \"type\": \"array\"\n            }\n          }\n        },\n        \"mf_form_id\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"elements\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#\"\n      }\n    },\n    \"isInner\": {\n      \"type\": \"boolean\"\n    },\n    \"widgetType\": {\n      \"type\": \"string\"\n    },\n    \"elType\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\"id\", \"settings\", \"elements\", \"isInner\", \"elType\"]\n}"},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.2,"position":[840,480],"id":"acabfb9d-9b67-41c2-981d-0cf522acf721","name":"Structured Output Parser"}],"connections":{"Google Gemini Chat Model1":{"ai_languageModel":[[{"node":"HTML page generator","type":"ai_languageModel","index":0}]]},"Add Images in TEMPLATE":{"main":[[{"node":"Seperate Each Section","type":"main","index":0}]]},"Seperate Each Section":{"main":[[{"node":"Code","type":"main","index":0}]]},"HTML page generator":{"main":[[{"node":"Add Images in TEMPLATE","type":"main","index":0}]]},"Code":{"main":[[{"node":"Limit","type":"main","index":0}]]},"Loop Over Items2":{"main":[[{"node":"Created Elementor File Uploaded in Google Drive","type":"main","index":0},{"node":"Respond to Webhook","type":"main","index":0}],[{"node":"Convert to Elementor JSON template6","type":"main","index":0}]]},"Convert to Elementor JSON template6":{"main":[[{"node":"Extract JSON Data6","type":"main","index":0}]]},"Google Gemini Chat Model8":{"ai_languageModel":[[{"node":"Convert to Elementor JSON template6","type":"ai_languageModel","index":0}]]},"Limit":{"main":[[{"node":"Loop Over Items2","type":"main","index":0}]]},"Extract JSON Data6":{"main":[[{"node":"Convert to Text","type":"main","index":0}]]},"Convert to Text":{"main":[[{"node":"Prepare Binary Data","type":"main","index":0}]]},"Prepare Binary Data":{"main":[[{"node":"Loop Over Items2","type":"main","index":0}]]},"On form submission1":{"main":[[{"node":"HTML page generator1","type":"main","index":0}]]},"Google Gemini Chat Model":{"ai_languageModel":[[{"node":"HTML page generator1","type":"ai_languageModel","index":0}]]},"Add Images in TEMPLATE1":{"main":[[{"node":"Seperate Each Section1","type":"main","index":0}]]},"Seperate Each Section1":{"main":[[{"node":"Code1","type":"main","index":0}]]},"HTML page generator1":{"main":[[{"node":"Add Images in TEMPLATE1","type":"main","index":0}]]},"Code1":{"main":[[{"node":"Limit1","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"Created Elementor File Uploaded in Google Drive1","type":"main","index":0}],[{"node":"Convert to Elementor JSON template","type":"main","index":0}]]},"Convert to Elementor JSON template":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Google Gemini Chat Model9":{"ai_languageModel":[[{"node":"Convert to Elementor JSON template","type":"ai_languageModel","index":0}]]},"Limit1":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Extract JSON Data":{"main":[[{"node":"Convert to Text1","type":"main","index":0}]]},"Convert to Text1":{"main":[[{"node":"Prepare Binary Data1","type":"main","index":0}]]},"Prepare Binary Data1":{"main":[[]]},"Webhook":{"main":[[{"node":"HTML page generator","type":"main","index":0}]]},"Groq Chat Model":{"ai_languageModel":[[]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"Convert to Elementor JSON template","type":"ai_outputParser","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{"On form submission1":[{"json":{"Company name":"myboatparis","Description":"Boat rental company for tourist in paris","Industry":"Rental","Services OR products":"Boat rental","submittedAt":"2025-05-05T07:59:42.040+02:00","formMode":"test"}}]},"versionId":"ff2cf324-c65e-47ec-9a1e-044e51e69fe0","triggerCount":0,"tags":[]}